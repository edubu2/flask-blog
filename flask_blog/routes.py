import os
import secrets
from PIL import Image
from flask import render_template, url_for, flash, redirect, request, abort
from flask_blog import app, db, bcrypt, mail # these come from __init__.py
from flask_blog.forms import (RegistrationForm, LoginForm, UpdateAccountForm,
                              PostForm, RequestResetForm, ResetPasswordForm)
from flask_blog.models import User, Post
from flask_login import login_user, current_user, logout_user, login_required
from flask_mail import Message

@app.route('/') # create home route. Browser will display whatever is returned from the following function
@app.route('/home') # make it so / and /home go to the same place
def home():
    """This route is the home/default landing page for website and can be accessed with '/' or '/home' """
    page = request.args.get('page', 1, type=int)
    # Show 5 posts per page, ordered by date posted
    posts = Post.query.order_by(Post.date_posted.desc()).paginate(page=page, per_page=5)
    return render_template('home.html', posts=posts) # we can now access this variable in the template using arg name 'posts'

@app.route('/about')
def about():
    return render_template('about.html', title='About')

@app.route('/register', methods=['GET', 'POST'])
def register():
    """This route is where users register for an account."""
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = RegistrationForm()
    if form.validate_on_submit(): # if the form was valid when it was submitted:
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        user = User(username=form.username.data, email=form.email.data, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        flash('Your account has been created! You are now able to log in.', 'success')
        return redirect(url_for('login'))
    return render_template('register.html', title='Register', form=form)

@app.route('/login', methods=['GET', 'POST'])
def login():
    """This route is where users login"""
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        # Check if user exists & the password is valid. If so, login. Otherwise, flash error.
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user, remember=form.remember.data)
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('home'))
        else:
            flash('Login unsuccessful. Please check email & password', 'danger')
    return render_template('login.html', title='Login', form=form)

@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('home'))

def save_picture(form_picture):
    """Saves user's new profile picture to our file system"""
    # Save photos with random filenames generated by secrets module
    random_hex = secrets.token_hex(8)
    _, f_ext = os.path.splitext(form_picture.filename)
    picture_fn = random_hex + f_ext
    # Get the full path of the profile picture with new filename
    picture_path = os.path.join(app.root_path, 'static/profile_pics', picture_fn)
    # Save resized picture to the picture_path
    resized_image = Image.open(form_picture)
    resized_image.thumbnail((125, 125))
    resized_image.save(picture_path)
    return picture_fn

@app.route('/account', methods=['GET', 'POST'])
@login_required
def account():
    """This route is where users can update their username, email address, and profile picture."""
    form = UpdateAccountForm()
    # Run validations for the form and if the new username/email is valid, update the DB with the new user info.
    if form.validate_on_submit():
        if form.picture.data:
            picture_file = save_picture(form.picture.data)
            current_user.image_file = picture_file
        current_user.username = form.username.data
        current_user.email = form.email.data
        db.session.commit()
        flash('Your account has been updated!', 'success')
        return redirect(url_for('account'))
    # if this is a GET request (meaning browser is just pulling the form, not submitting), auto-populate the fields with the user's existing info
    elif request.method == 'GET':
        form.username.data = current_user.username
        form.email.data = current_user.email
    image_file = url_for('static', filename='profile_pics/' + current_user.image_file) # DB call
    # Also return image_file so we can reference that in our template
    return render_template('account.html', title='Account', image_file=image_file, form=form)

@app.route('/post/new', methods=['GET', 'POST'])
@login_required
def new_post():
    """This route is where users will add new posts to the blog."""
    form = PostForm()
    if form.validate_on_submit():
        # create instance of Post class w/ this post's content. I could have expressed the 'user_id=current_user' attribute as 'author=current_user' instead, since it's backref to class User.
        post = Post(title=form.title.data, content=form.content.data, author=current_user)
        db.session.add(post)
        db.session.commit()
        flash("Your post has been created!", 'success')
        return redirect(url_for('home'))
    return render_template('create_post.html', title='New Post', form=form, legend_name='New Post')

@app.route('/post/<int:post_id>')
def post(post_id):
    # grab the post from the db. If it doesn't exist, return 404 error ('page doesn't exist')
    post = Post.query.get_or_404(post_id)
    return render_template('post.html', title=post.title, post=post)

@app.route('/post/<int:post_id>/update', methods=['GET', 'POST'])
@login_required
def update_post(post_id):
    """This route is where users can modify their existing posts """
    # grab the post from the db. If it doesn't exist, return 404 error ('page doesn't exist')
    post = Post.query.get_or_404(post_id)
    # Ensure the editor is actually the author of the post
    if post.author != current_user:
        abort(403) # 403 is HTTP response for a forbidden route.
    form = PostForm()
    # If it's a POST request (meaning user submitted the form), update DB if the changes are valid.
    if form.validate_on_submit():
        post.title = form.title.data
        post.content = form.content.data
        db.session.commit()
        flash('Your post has been updated', 'success')
        return redirect(url_for('post', post_id=post.id))
    # Otherwise (GET request), pre-populate form with existing post data
    elif request.method == 'GET':
        form.title.data = post.title
        form.content.data = post.content
    return render_template('create_post.html', title='Update Post', form=form, legend_name='Update Post')

@app.route('/post/<int:post_id>/delete', methods=['POST'])
@login_required
def delete_post(post_id):
    """This route allows users to delete posts """
    post = Post.query.get_or_404(post_id)
    if post.author != current_user:
        abort(403)
    db.session.delete(post)
    db.session.commit()
    flash('Your post has been deleted', 'success')
    return redirect(url_for('home'))

@app.route('/user/<string:username>')
def user_posts(username):
    """This route shows all posts for a given user. """
    page = request.args.get('page', 1, type=int)
    user = User.query.filter_by(username=username).first_or_404() # if the username isn't associated with any posts, return 404 error
    posts = Post.query.filter_by(author=user)\
        .order_by(Post.date_posted.desc())\
        .paginate(page=page, per_page=5)
    return render_template('user_posts.html', posts=posts, user=user) # we can now access this variable in the template using arg name 'posts'

def send_reset_email(user):
    token = user.get_reset_token()
    sender = 'wilens1@yahoo.com'
    msg = Message(subject='Password Reset Request',
        sender=sender,
        recipients=[user.email])
    msg.body = f'''To Reset your password, visit the following link:
{url_for('reset_token', token=token, _external=True)}
    

If you did not make this request, simply ignore this email. No changes will be made.
'''
    mail.send(msg)

@app.route('/reset_password', methods=['GET', 'POST'])
def reset_request():
    """This is the first reset_password route that only asks user for email & verifies. """
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = RequestResetForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        send_reset_email(user)
        flash('An email has been sent with instructions to reset your password.', 'info')
        return redirect(url_for('login'))

    return render_template('reset_request.html', title='Reset Password', form=form)


@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_token(token):
    """This route is where users actually reset their password.  """
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    user = User.verify_reset_token(token) # returns user ID associated with the token
    if user is None:
        flash('That is an invalid or expired token', 'warning')
        return redirect(url_for('reset_request'))
    form = ResetPasswordForm()
    if form.validate_on_submit(): # if the form was valid when it was submitted:
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        user.password = hashed_password
        db.session.commit()
        flash('Your password has been updated!', 'success')
        return redirect(url_for('login'))
    return render_template('reset_token.html', title='Reset Password', form=form)
