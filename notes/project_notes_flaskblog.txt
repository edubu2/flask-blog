Using Flask

Route Decorators (@app.route('/'))
  - these are what we type into our browsers use to go to different pages within a website
  - app.route decorators handle all the back-end stuff
    - allow us to write a function that returns the info that will be shown on our website for this specific route
    - the '/' is 'root', or basically the website's homepage


Running the Website from Local Machine Using Environment Variables
  - terminal
  - cd project folder where the python script with the flask app is
  - % export FLASK_APP=<python_script_name.py>
  - % flask run
    - the 'flask run' command starts the local server
    - open the returned ip from terminal in web browser to see the website
      - contains whatever is returned from the function within the '/' route director

Displaying changes in browser in real-time
  - by default, when you make changes to the script, you need to restart the server in terminal for the browser to reflect the changes
    - use control + c to shut down server then re-enter the 'flask run' command
  - we can set Flask to 'debug mode', which will display any saved changes to our file when we refresh the browser.
    - % export FLASK_DEBUG=1
    - % flask run
  - nice! now whenever we save changes to the python script, we can view them in the browser by refreshing the page
    - much better than having to restart the server for every change!

Running our Website straight from Python file (instead of using env variables)
  - this is better if we don't want to mess with command-line variables
  - at the end of the python script, use the following lines of code:

              if __name__ == '__main__':
                  app.run(debug=True)

Adding Routes
  - to add a route, simply add another route decorator with the path to the new page
  - ex: about page
    - @app.route('/about')
    - def about():
    -   return "<h1>About Page</h1>"
  - can add a @app.route('/home') route directly after the app.route('/') so that / and /home go to the same place

Using templates for more complex HTML
  - create templates directory
  - instead of writing the HTML in the python script, we will import them (using Flask's templating module)
  - this allows us to edit all of the HTML in one place without crowding our python script
  - requires us to import render_template from flask
    - so at this point, our import looks like:
      - from flask import Flask, render_template
  - then, in our return statements for our home and about routes:
    - return render_template('home.html')
      - automatically knows to look in the 'templates' dir (must be undercase)

Using Python variables in our html templates:
  - we do this by creating a new argument in the 'return render_template...' line
    - example: assume we have a 'posts' variable containing a list of blog post dictionaries
        return render_template('home.html', posts=posts)
      - we can now reference the name of the argument we created ('posts' in this case) in the html template file.
      - even if the data was saved in variable called 'data', we would still use 'posts' in the html file
        - the .py script would have the arg 'posts=data'
  - now open the home.html template (since that's where we want the posts to be displayed)
    - the templating engine Flask uses is called jinja2
      - it allows us to write code here within our template

HTML template coding with jinja2 (SYNTAX):
  - GENERAL SYNTAX
    - start code blocks using curly brackets and percent signs {% code_here_ %}
    - display variables using double curly brackets (no %): {{ variable.name }}
    - works with list of dicts (at this point each blog post is saved as a dictionary, all of the dictionaries are in a list)
  - LOOPS
    - here's how we display all posts on the home page:
          <body>
            {% for post in posts %}
              <h1>{{ post.title }}</h1>
              <p>By {{ post.author }} on {{ post.date_posted }}</p>
              <p>{{ post.content }}</p>
            {% endfor %}
          </body>
  - IF/ELSE
    - {% if title %}    <-- starts conditional, true if title is given as a parameter in the python script, false otherwise
    - {{ title }}       <-- will display the value assigned to the 'title' param in py script
    - {% else %}
    - default_title_if_none_given
    - {% endif %}

Template Inheritance (blocks)
  - avoids repetition in code
  - requires a separate file to keep all the repeated code, so you can update it all in one place
    - in this project the file is templates/layout.html
  - right now, our home.html and about.html templates contain mostly the same code
    - this will become a pain if we want to change something
  - templates should only show what is unique for that page
    - if I open about.html, I don't want to see the header and title that's present on every other page
  - so, let's create a layout.html file
    - this file will contain everything that is present in all files
    - we will create BLOCKS in the template file in places that can be overridden by the other templates
      - for example, the <body> section is where about.html differs from home.html
      - so within <body> we create a block called 'content' that can be overridden by the other web pages to make them unique
  - looks like this:

      <body>
        {% block content %} {% endblock content %}
      </body>

  - now, we can replace this block in the home.html and about.html files with the relevant content
    - in the home page (where we are displaying blog posts), we put the for loop inside the block
    - first, call {% extends "layout.html" %} as the first line in home.html
      - we're now following the layout in layout.html
    - now time to replace block content in layout.html with blog posts. Here's the syntax:

        {% extends "layout.html" %}
        {% block content %}
            {% for post in posts %}
              <h1>{{ post.title }}</h1>
              <p>By {{ post.author }} on {{ post.date_posted }}</p>
              <p>{{ post.content }}</p>
            {% endfor %}
        {% endblock content %}

Static Folder (for .js and .css files)
  - to reference .css files in our templates, we must store them in a folder called '/static'

YouTube tutorial part 3 (forms & user input) start

Giving users ability to create accounts, login/logout, etc.

Creating forms with WTFORMS
  - not ideal to do this from scratch
  - most popular way to implement forms with Flask is using the WTFORMS module
    - pip install wtf

Creating Forms
  - NOTE: REQUIRES SECRET KEY FOR SECURITY WHEN USING FORMS (will cover later)
  - put new 'forms.py' file in the project's root dir
    - it could go directly into the main app, but it's better to split this up
      - better for code reuse
      - makes project simpler to understand & debug
  - forms.py
    - from flask_wtf import FlaskForm
    - it's a little different than using HTML forms
    - we use python classes to represent our forms, and they will then be converted into HTML forms from our template(s)

Creating Registration Form
  - in forms.py, first create class RegistrationForm that inherits from FlaskForm
    - class RegistrationForm(FlaskForm)
  - within this class is where we give our different fields. Each field has a field type (i.e. StringField, PasswordField)
    - these must be imported @ top as such:
      - from wtforms import StringField, PasswordField
  - Validators
    - passed as a list into the 'validators' arg. of fields
    - need to import them as such:
      - from wtforms.validators import DataRequired, Length, Email, EqualTo
      - what these are:
        - DataRequired: fields with this validator cannot be left empty
        - Length: allows you to set min and/or max length for a certain field (i.e. usernames)
        - Email: ensures valid email
        - EqualTo: validates that the entry in the current field is equal to the value in the referenced field
          - use this for confirm_password fields
          - confirm_password = PasswordField('Confirm PW', validators=[DataRequired(), EqualTo('password')])
            - when 'password' is the name of the original password variable
      - NOTE: validators must have parenthesis in our code (not in import line)
  - Submit button
    - handled with SubmitField (add this to imports)
    - simple: submit = SubmitField('Sign Up')
      - replace 'sign up' with whatever you want the button to say

Creating Login Form
  - we will have our users sign in with their email address (not username)
    - CS preference (and mine) - harder to forget your own email!
  - fields: email/password/remember/submit
    - we've used all of these in our previous form, except for remember
  - Remember field - boolean yes/no for whether or not browser should remember this site

Secret Keys
  - NOTE: MUST USE SECRET KEY WHEN USING FORMS!!
  - before we cover how to use forms in our app, we need to create one of these bad boys.
  - these protect against modifying cookies and cross-site request forgery attacks, and more
  - easy to create. Just go to the top of application file (flask_blog.py)
    - right under app variable, we can set a secret key with:
      - app.config['SECRET_KEY'] = '2c6f7da15b2e9db5e91dd289c8e75a9f'
        - we got this token by opening python session in terminal and typing:
          - import secrets
          - secrets.token_hex(16) <-- 16=num_bytes
            - this command returns a hex token like the one above
  - you will want to make this an environment variable at some point. We'll do this later on in the series

Using Forms in Application
  - to use the forms, we need to import the classes from the 'forms' module we created into our application script (flask_blog.py)
  - now we need to create a registration route and a login route
    - this is done the same way as the other routes, using render_template
    - but since we're using the form, we assign the form we just imported to the 'form' arg of render_template
      - Note we haven't created register.html and login.html yet, but we're about to do that.

Writing Forms into .HTML files
  - each field has it's own div
  - see commented notes in templates/register.html

Getting a Route to Accept Post Requests
  - use the 'methods' param of @app.route in the application (pass a list)
    - @app.route("/register", methods=['GET', 'POST'])

Message Flashing
  - important part of user experience
  - requires 'flash' import (from flask)
  - we'll add an 'account created' alert after a user makes an account
    - 'flash' method takes two params: message text (shown to user) and message category (not shown to user)
  - add the top of content section in layout.html so that on alerts flash by default on any pages (assuming the other .html templates are inheriting from .html)
    - the syntax is in layout.html and can be found in the Flask docs
      - https://flask.palletsprojects.com/en/1.1.x/patterns/flashing/
  -

Handling Redirects
  - this is done in app.py (flask_blog.py in our case)
  - requires the 'redirect' import (from flask)
  - syntax:
      return redirect(url_for('name_of_route_function_to_redirect_to'))
        - ensure redirect location is in quotes
  - we'll add a redirect for the register route to the home page
    - it's confusing to user to fill out a registration form and have the page reload to the same empty form once finished
    - better to redirect them to the /home page and send them an alert ('account created'), which we did in the previous step

Handling Form Errors w/ bootstrap
  - need to edit register.html
  - use an if statement basically saying if there are errors, display them.
  - doing this with bootstrap plugin would be much easier but CS prefers to teach this way so we can make all customization decisions ourselves
  - code doesn't seem very intuitive to me but it works - see register.html

Creating Login page (login.html)
  - copy layout.html content to login.html and modify as follows:
    1. change legend to 'Log In' (from 'Register')
    2. remove the username div/form group (since we're using email, not username, to login)
    3. remove confirm_password div
    4. Change 'Already have an account?' to: 'Don't have an account?'
  - then create a 'Remember Me?' checkbox
    - we'll use bootstrap class "form-check" since it's a checkbox
    - then add the form.remember & label with the 'form-check-input' class
  - create a password reset link
    - with dummy link - can use # in place of actual link

Bootstrap Alert Categories
  - when we flash a message, we can assign it a category (second parameter)
  - the category assigned will determine the way the alert is displayed
    - 'success' - green (ex: 'account created successfully')
    - 'danger' - red (ex: 'invalid password')

Handling Navigation Bar Links (Navbar) w/ url_for
  - the way it's set up right now, our website would break if we changed the name of any of our routes.
    - they are direct links to our routes w/ href
    - instead of '/home' to get to home route, we will use {{ url_for('home') }}

Connecting website with SQLAlchemy DB
  - pip install flask-sqlalchemy
  - flask_blog.py - import SQLAlchemy (from sqlalchemy)
  - we'll use SQLite db (easy to get started with)
    - db will be saved as file in filesystem

Setting Up SQLite DB
  - in flask_blog.py
  - to set location of db:
    - set as config
    - app.config['SQLALCHEMY'_DATABASE_URI]
      - with SQLite we can specify a relative path with three forward slashes & the URI ('sqlite:///site.db')
        - three slashes are a relative path from current file, so it should get created here in our project dir alongside the flask_blog.py module we're already in.

Create DB Instance
  - db = SQLAlchemy(app)
    - this codeblock gives us an SQLAlchemy DB instance & are ready to work with our db
  - with SQLAlchemy, we can represent our db structure as classes
  - NOTE: ideally we would do this in a separate file. We'll start with it in our main app for now.
    - this is because the dependencies can get messed up when split into separate files
    - we will handle this in the next video

SQLAlchemy Classes:
  - each class represents a table in the DB
  - let's create the 'User' class to handle our app's users

Creating SQLAlchemy Classes:
  - class <table_name>(db.Model):
    - table_name must have first letter capitalized (like all classes)
    - inherits from the db.Model class that we imported
  - attributes will be the columns

Creating Columns in SQLAlchemy db:
  - as attributes of the <table_name> class:
  - <col_name> = db.Column(db.<DataType([limit], <other preferences>)
    - other preferences can be:
      - nullable=False
      - primary_key=True
      - default=<value_to_use_if_empty>
      - db.ForeignKey("<table_name>.<col_name>")
        - note the foreign table name here will be undercase
        - only use uppercase when referencing the python class

Creating Relationships to other tables w/ SQLAlchemy
  - this will not display as a column! Helps w/ queries.
  - <ref_name> = db.relationship('<other_table_name>', backref='<see_notes>', lazy=True)
    - backref: the name that we want to reference this field as in database calls
      - will see this in action later
    - lazy=True: defines WHEN the data is loaded
      - loads data as necessary in one go
      - convenient here because we'll be able to get all posts, in this case, for an individual user.

Saving Times to an App DB
  - import datetime from datetime
  - to save the time of posts on our site, we'll set up the db field with default=datetime.utcnow parameter
    - ensure no parenthesis after utcnow, otherwise it will be overwritten!
  - always use utctime when saving times to db for consistency

Creating DB in file system
  - we can do this once we have set up our classes
  - use terminal
    - from project dir, start python3
      - from flask_blog import db
      - db.create_all()
  - that's it! If set up correctly, we'll be able to see the db in our project dir now.

Adding records to SQLAlchemy DB (command line)
  - python3 from command line (in project dir)
    - from flask_blog import db
    - from flask_blog import User, Post  <-- import db classes
    - user_1 = User(username='<un>', email='<em_ad>', password='pw')
      - only need to add fields where nullable=False & no default value set
    - db.session.add(user_1)
      - this does not actually change the db until we commit the change
      - we can add many users at this point and then commit all at once
    - db.session.commit()

Querying records from SQLAlchemy DB (command line)
  - python3, command line (in project dir)
    - from flask_blog import User, Post
      - User.query.all()
        - shows all records from User table
      - User.query.first()
        - returns first record in User table
  - filtering results
    - filter by usernames:
      - User.query.filter_by(username="Corey").all()
        - returns any users with UN=Corey

Saving Query Results as Variables & Using those variables
  - we just added a couple of posts in the Post table
  - let's grab the first post from the DB and save it to a variable
  - post = Post.query.first()
    - post.title
      - returns the title of the first post
    - post.user_id
      - returns the user_id integer
        - this might not be what we want. What if we want to see the full record in Users for the author of this post?
    - post.author
      - that did it!
      - it worked since we set up the backref under the 'posts' attribute of User class/table
    - can iterate through posts and print the author of each one
      - p = Post.query.all()
      - for post in p:
        - print(post.author)

Dropping Data from SQLAlchemy DB
  - same way as we create the db!
  - db.drop_all()

NEW SECTION - RESTRUCTURING APP AS PACKAGE (instead of module)

Restructuring App as Package
  - this is kind of a pain and is usually better to start a project as a package
  - we need to do this here in order to save our db models in another module (without running into circular import)
  - to restructure as a package:
    1. create new folder in root with the exact same name as the app's python file
      - in this case our folder will be called flask_blog
    2. save an __init__.py file in the new folder
      - this file contains all of the imports
    3. move everything from the root folder into this new folder EXCEPT the application itself
    4. break up the flask_blog.py file into different modules inside the project folder (flask_blog/flask_blog/)
      - the only thing left in the app file should be:
          if __name__ == '__main__':
            app.run(debug=True)
        - but since we're calling the run() function, we need to import app (from flask_blog)
          - for this to work, there must be an 'app' variable inside the __init__.py file (which there is)
      - /routes.py: copy all route data there
        - we should do our route imports in this file (not init)

Hashing Passwords
  - first step of user authentication: hashing our passwords for security
  - see notes/password_hashing.txt for details

BCrypt setup
  - we will setup Bcrypt in __init__.py
  - must import Bcrypt (from flask_bcrypt)
  - Bcrypt(app) <-- initializes bcrypt for our app

Adding Registered Users to DB
  - go to /routes --> register route
  - under the "if form.validate_on_submit():" is where we will add it to db
    - since we only want to submit valid info to db
  - same process as what we did in terminal w/ BCrypt (see notes/password_hashing.txt)
  - great, we tested that out by registering an account with username = 'wilensel', then querying the DB for that username in terminal. It worked!

Updating Form Validation to make sure username isn't already taken
  - for this, we'll go to our 'RegistrationForm' class in forms.py
  - we'll create new functions within this class called 'validate_<field>(self, <field>)'
      - for example, the username field:
        def validate_username(self, username):
          if user:
            raise ValidationError("Username already exists. Please try another.")

Creating Login System with flask_login
  - pip install flask_login
  - now we need to import into our __init__.py file
    - from flask_login import LoginManager
  - then create an instance of this class
    - login_manager = LoginManager(app)
  - now we're ready to use our login manager in our application
    - to do this, we add some functionality to our DB models
    - it will then handle all of these sessions in the background for us!
  - so, open models.py
    - import login_manager from flask_blog
    - now we need to create a function w/ a decorator called 'user_loader'
      - can find this on the extension's documentation, no need to memorize.

User_loader decorators to manage login sessions
  - must create the user_loader decorator so that the extension knows how to find one of our users by ID
  - we want the function (load_user(user_id)) to grab the user by user_id
  - so, it should return User.query.get(int(user_id)) <-- this will return the user object for the user with that ID

OK, the extension is almost setup. Last thing - it expects our user model to have certain attributes and methods. Four to be exact:
  1. is_authenticated - returns true if valid credentials
  2. is_active
  3. is_anonymous
  4. get_id

  - we could add all of these ourselves, but the extension provides us with a simple class that we can inherit from that will automatically add all of these required methods for us
    - from flask_login import UserMixin
    - then, also have the 'class User' inherit from the 'UserMixin'
      - User class should inherit from both db.Model and UserMixin.
        - class User(db.Model, UserMixin)

Now Update the Login Route to Handle Sessions
  - check that username and password match up, then use the login_user function we imported (from flask_login) to log in the user.
  - also want to redirect user to home once login complete

Handle logouts
  - need to create /logout route
  - this is very simple, the logout_user() function from flask_login handles this for us

Displaying 'logout' instead of 'login' on the navbar when a user is logged in:
  - requires jinja2 conditional where we have the 'login' part in the layout.html template (see templates/layout.html navbar section for code)

Restricting routes to logged-in users only with Login Manager (from flask_login import LoginManager)
  - ex: clicking 'edit profile' link on Twitter when you're not logged in will throw an error like 'Please login in order to edit your profile'
  - add login_required import (from flask_login)
  - add @login_required decorator right under the @app.route('/account') line in routes.py
  - then, add another line to __init__.py:
    login_manager.login_view = 'login'
      - what you set this equal to is the name of the function (the same thing we would put in the url_for function)

Redirecting back to failed route after successful login
  - ex: not logged in. Tried to go to /account. Got a note saying need to login. Once I log in, I'm redirected to home instead of /account.
    - let's fix this!
    - ok, when we reach the account page when we're not logged in, we're redirected to login page. But the URL at top of browser has a parameter:
      - ...5000/login?next=%2Faccount
      - if this exists, this is where we want to direct our user once logged in.
  - to do this, go to routes.py & import 'request' from flask
  - @login route
    - next_page = request.args.get('next')
      - request.args is a dictionary (make sure to use .get, so that nothing's returned if the route doesn't exist)

User Account Page - Allowing user to update account info/upload picture
  1. create form in forms.py
    - similar to RegistrationForm but without pw/confirm pw
    - create custom validator functions
      - first, check if the user actually made a change to their username/email
        - if they didn't make a change, we still want the form to work, but we just won't update the DB for that field
          - for example, if they only change username, we don't want to override the email address
  2. update route to include the form and return the image file & account form
  3. add form to account.html (copied from register.html, remove password fields, remove "content-section" div to make page look cleaner)

User Account Page - Updating database with account changes
  1. routes.py
    - we will be posting a form back to this route, so need to allow POST method
    - then, if the form is valid, update current_user.username (or email) with the data from the form (form.username.data)
  2. forms.py
    - create form
    - Updating Image File:
      - must import FileField & FileAllowed from flask_wtf.file
        - FileField: this is what allows the user to choose an image file from their file explorer/finder
        - FileAllowed: limits the filetypes (i.e. jpg, png) that can be accepted from user.
  
