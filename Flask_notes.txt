Using Flask

Route Decorators (@app.route('/'))
  - these are what we type into our browsers use to go to different pages within a website
  - app.route decorators handle all the back-end stuff
    - allow us to write a function that returns the info that will be shown on our website for this specific route
    - the '/' is 'root', or basically the website's homepage


Running the Website from Local Machine Using Environment Variables
  - terminal
  - cd project folder where the python script with the flask app is
  - % export FLASK_APP=<python_script_name.py>
  - % flask run
    - the 'flask run' command starts the local server
    - open the returned ip from terminal in web browser to see the website
      - contains whatever is returned from the function within the '/' route director

Displaying changes in browser in real-time
  - by default, when you make changes to the script, you need to restart the server in terminal for the browser to reflect the changes
    - use control + c to shut down server then re-enter the 'flask run' command
  - we can set Flask to 'debug mode', which will display any saved changes to our file when we refresh the browser.
    - % export FLASK_DEBUG=1
    - % flask run
  - nice! now whenever we save changes to the python script, we can view them in the browser by refreshing the page
    - much better than having to restart the server for every change!

Running our Website straight from Python file (instead of using env variables)
  - this is better if we don't want to mess with command-line variables
  - at the end of the python script, use the following lines of code:

              if __name__ == '__main__':
                  app.run(debug=True)

Adding Routes
  - to add a route, simply add another route decorator with the path to the new page
  - ex: about page
    - @app.route('/about')
    - def about():
    -   return "<h1>About Page</h1>"
  - can add a @app.route('/home') route directly after the app.route('/') so that / and /home go to the same place

Using templates for more complex HTML
  - create templates directory
  - instead of writing the HTML in the python script, we will import them (using Flask's templating module)
  - this allows us to edit all of the HTML in one place without crowding our python script
  - requires us to import render_template from flask
    - so at this point, our import looks like:
      - from flask import Flask, render_template
  - then, in our return statements for our home and about routes:
    - return render_template('home.html')
      - automatically knows to look in the 'templates' dir (must be undercase)
